// Generated by BUCKLESCRIPT VERSION 1.5.2, PLEASE EDIT WITH CARE
'use strict';

var List       = require("bs-platform/lib/js/list");
var $$Array    = require("bs-platform/lib/js/array");
var Curry      = require("bs-platform/lib/js/curry");
var React      = require("react");
var ReactRe    = require("reason-react/lib/js/src/reactRe");
var Pervasives = require("bs-platform/lib/js/pervasives");

var componentDidMount = ReactRe.Component[0];

var componentWillUpdate = ReactRe.Component[1];

var componentDidUpdate = ReactRe.Component[2];

var componentWillReceiveProps = ReactRe.Component[3];

var componentWillUnmount = ReactRe.Component[4];

var getInstanceVars = ReactRe.Component[5];

var jsPropsToReasonProps = ReactRe.Component[6];

var getInitialState = ReactRe.Component[7];

var name = "Navbar";

function render(param) {
  var props = param[/* props */1];
  var tabs = List.map(function (channel) {
        return React.createElement("li", {
                    key: Pervasives.string_of_int(channel[/* id */0]),
                    className: "protected example" + (
                      props[/* selectedChannelId */0] === channel[/* id */0] ? " active" : ""
                    ),
                    onClick: Curry._1(props[/* onChannelSelected */2], channel)
                  }, React.createElement("a", {
                        className: "show_channel"
                      }, React.createElement("span", undefined, channel[/* title */1])));
      }, props[/* channels */1]);
  var match = props[/* focused */3];
  var match$1 = props[/* searchTerm */6];
  return React.createElement("nav", {
              className: "nav" + (
                match !== 0 ? " search-focus" : ""
              )
            }, React.createElement("form", {
                  className: "search",
                  action: "/search",
                  method: "get"
                }, React.createElement("input", {
                      className: "query",
                      name: "query",
                      type: "text",
                      value: match$1 ? match$1[0] : "",
                      onKeyDown: function ($$event) {
                        if ($$event.which === 13) {
                          return $$event.preventDefault();
                        }
                        else {
                          return 0;
                        }
                      },
                      onFocus: Curry._1(props[/* onFocus */4], /* true */1),
                      onBlur: Curry._1(props[/* onFocus */4], /* false */0),
                      onChange: props[/* onSearchUpdated */5]
                    }), React.createElement("input", {
                      className: "submit",
                      type: "submit",
                      value: "Search"
                    })), React.createElement("ul", {
                  id: "channel_nav"
                }, $$Array.of_list(tabs)));
}

var Navbar_008 = /* Stateful */ReactRe.Component[8];

var Navbar_009 = /* JsProps */ReactRe.Component[9];

var Navbar_010 = /* InstanceVars */ReactRe.Component[10];

var Navbar = /* module */[
  /* componentDidMount */componentDidMount,
  /* componentWillUpdate */componentWillUpdate,
  /* componentDidUpdate */componentDidUpdate,
  /* componentWillReceiveProps */componentWillReceiveProps,
  /* componentWillUnmount */componentWillUnmount,
  /* getInstanceVars */getInstanceVars,
  /* jsPropsToReasonProps */jsPropsToReasonProps,
  /* getInitialState */getInitialState,
  Navbar_008,
  Navbar_009,
  Navbar_010,
  /* name */name,
  /* render */render
];

var include = ReactRe.CreateComponent([
      name,
      getInstanceVars,
      getInitialState,
      componentDidMount,
      componentWillReceiveProps,
      componentWillUpdate,
      componentDidUpdate,
      componentWillUnmount,
      jsPropsToReasonProps,
      render
    ]);

var wrapProps = include[1];

function createElement(selectedChannelId, channels, onChannelSelected, onFocus, focused, onSearchUpdated, searchTerm) {
  return Curry._1(wrapProps, /* record */[
              /* selectedChannelId */selectedChannelId,
              /* channels */channels,
              /* onChannelSelected */onChannelSelected,
              /* focused */focused,
              /* onFocus */onFocus,
              /* onSearchUpdated */onSearchUpdated,
              /* searchTerm */searchTerm
            ]);
}

var comp = include[0];

exports.Navbar        = Navbar;
exports.comp          = comp;
exports.wrapProps     = wrapProps;
exports.createElement = createElement;
/* include Not a pure module */
